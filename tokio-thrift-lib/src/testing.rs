// foobar: autogenerated by tokio_thrift
#![allow(dead_code, unused_imports)]
use tokio_thrift::protocol::{Error, ThriftType};
use tokio_thrift::{ThrustResult, ThrustError};
use tokio_thrift::dispatcher::{self, Dispatcher, Incoming};
use tokio_thrift::reactor::Message;
use std::thread::JoinHandle;
use std::net::SocketAddr;
use std::sync::mpsc::{Sender, Receiver};
use tangle::{Future, Async};
use std::collections::{HashMap, HashSet};
use tokio_thrift::protocol::{ThriftDeserializer, ThriftSerializer};
use tokio_thrift::protocol::{Serializer, Deserializer};
use tokio_thrift::protocol::{Deserialize, Serialize, ThriftMessage};
use tokio_thrift::protocol::{BinarySerializer, BinaryDeserializer};


pub trait FlockDbService {
    fn query(&mut self, voodoo: i32) -> Future<String>;
    fn ack(&mut self, source_id: i64, tuple_id: i64) -> Future<i32>;
}

pub struct FlockDbClient {
    dispatcher: Sender<dispatcher::Incoming>,
    handle: JoinHandle<ThrustResult<()>>,
}


impl FlockDbClient {
    pub fn new(addr: SocketAddr) -> FlockDbClient {
        let (handle, tx) = Dispatcher::spawn(dispatcher::Role::Client(addr)).unwrap();

        FlockDbClient {
            dispatcher: tx,
            handle: handle,
        }
    }
}

struct FlockDb_query_Args {
    voodoo: i32,
}

struct FlockDb_ack_Args {
    source_id: i64,
    tuple_id: i64,
}

impl Serialize for FlockDb_query_Args {
    fn serialize<S>(&self, s: &mut S) -> Result<(), Error>
      where S: Serializer + ThriftSerializer
    {
        try!(s.write_struct_begin("FlockDb_query_Args"));
        try!(s.write_field_begin("voodoo", ThriftType::I32, 1));
        try!(self.voodoo.serialize(s));
        try!(s.write_field_stop());
        try!(s.write_field_end());
        try!(s.write_struct_end());
        Ok(())
    }
}
impl Serialize for FlockDb_ack_Args {
    fn serialize<S>(&self, s: &mut S) -> Result<(), Error>
      where S: Serializer + ThriftSerializer
    {
        try!(s.write_struct_begin("FlockDb_ack_Args"));
        try!(s.write_field_begin("source_id", ThriftType::I64, 1));
        try!(self.source_id.serialize(s));
        try!(s.write_field_stop());
        try!(s.write_field_end());
        try!(s.write_field_begin("tuple_id", ThriftType::I64, 2));
        try!(self.tuple_id.serialize(s));
        try!(s.write_field_stop());
        try!(s.write_field_end());
        try!(s.write_struct_end());
        Ok(())
    }
}
impl Deserialize for FlockDb_query_Args {
    fn deserialize<D>(&self, de: &mut D) -> Result<(), Error>
      where D: Deserializer + ThriftDeserializer
    {
        try!(de.read_struct_begin());
        let args = FlockDb_query_Args {
            voodoo: {
                match try!(de.read_field_begin()).ty {
                    ThriftType::Stop => { try!(de.read_field_begin()); },
                    _ => {}
                }
                let val = try!(de.deserialize_i32());
                try!(de.read_field_end());
                val
            }
        };
        try!(de.read_struct_end());
        Ok(args)
    }
}
impl Deserialize for FlockDb_ack_Args {
    fn deserialize<D>(&self, de: &mut D) -> Result<(), Error>
      where D: Deserializer + ThriftDeserializer
    {
        try!(de.read_struct_begin());
        let args = FlockDb_ack_Args {
            source_id: {
                match try!(de.read_field_begin()).ty {
                    ThriftType::Stop => { try!(de.read_field_begin()); },
                    _ => {}
                }
                let val = try!(de.deserialize_i64());
                try!(de.read_field_end());
                val
            }
            tuple_id: {
                match try!(de.read_field_begin()).ty {
                    ThriftType::Stop => { try!(de.read_field_begin()); },
                    _ => {}
                }
                let val = try!(de.deserialize_i64());
                try!(de.read_field_end());
                val
            }
        };
        try!(de.read_struct_end());
        Ok(args)
    }
}